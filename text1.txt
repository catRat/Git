集中式版本控制系统

每个开发者都在他或她自己的计算机上有一个包含所有项目文件的工作目录。当该开发者在本地做了修改之后，他或她就会定期将修改提交给某台中央服务器。然后，开发者在执行更新操作的同时也会从该服务器上捡取出其他开发者所做的修改。这台中央服务器上存储着这些文件的当前版本和历史版本。因此，这些被并行开发的分支，以及各种被命名的版本都会被集中管理。

分布式版本控制系统

在这个系统中，开发者环境与服务器环境之间是没有分隔的。每一个开发者都同时拥有一个用于当前文件操作的工作区与一个用于存储该项目所有版本、分支以及标签的本地版本库（我们称之为一份克隆）。每个开发者的修改都会被载入成一次次的新版本提交（commit），首先提交到其本地版本库中。然后，其他开发者就会立即看到新的版本。通过推送（push）和拉回（pull）命令，我们可以将这些修改从一个版本库传送到另一个版本库中。这样一来，从技术上来看，这里所有的版本库在分布式架构上的地位是同等的。因此，从理论上来讲，我们不再需要借助服务器，就可以将某一台开发工作机上所做的所有小就该直接传送给另一开发工作机。

版本库

版本库本质上就是一个高效的数据存储结构，由文件、目录和版本组成。

一个提交对象的散列值实际上就是它的“版本号”。

分支的创建与合并

第2章 入门

准备Git环境

工作区指一个带版本库的项目目录。

提交

所有修改都必须要先被归档成一次新的提交。我们要对修改过的文件和新文件执行add命令，并对要删除的文件使用rm命令。

显示历史

log命令可用来显示项目的历史。

合并（merge）

push 路径 分支

在Git中，回复到某一版本通常称之为检出（checkout）操作。

共享版本库